name: Commit and deploy
on:
  workflow_call:
    inputs:
      microservice:
        description: 'Microservice à déployer'
        type: string
        required: true
      environment:
        description: 'Environnement'
        type: string
        required: true
      tag:
        description: 'Tag dans ACR'
        type: string
        required: true
      pact:
        description: 'PACT required'
        type: boolean
        required: false
        default: false
    secrets:
      pactflow_host:
        required: true
      pactflow_token:
        required: true
      gh_access_token:
        required: true
      az_credentials_dev:
        required: true
      az_credentials_quality:
        required: true
      az_credentials_preprod:
        required: true
      az_credentials_prod:
        required: true
      tech_user_account:
        required: true
      tech_user_account_email:
        required: true
      dev_cluster_webhook:
        required: true
      quality_cluster_webhook:
        required: true
      preprod_cluster_webhook:
        required: true
  workflow_dispatch:
    inputs:
      microservice:
        description: 'Microservice à déployer'
        type: string
        required: true
      environment:
        description: 'Environnement'
        type: string
        required: true
      tag:
        description: 'Tag dans ACR'
        type: string
        required: true
      pact:
        description: 'PACT required'
        type: boolean
        required: false
        default: false
     
env:
  MICROSERVICE: ${{  inputs.microservice  }}
  PACTFLOW_HOST: ${{  secrets.pactflow_host  }}
  TAG: ${{  inputs.tag  }}
  PACTFLOW_TOKEN: ${{ secrets.pactflow_token }}
  ENVIRONMENT: ${{ inputs.environment }}

jobs:
  check-commit-deploy:
    name: check, commit and deploy
    concurrency:
      group: cad-${{ inputs.environment }}
    runs-on: ubuntu-20.04
    steps:
      - run: |
           docker run pactfoundation/pact-cli pact-broker can-i-deploy \
            --pacticipant=${MICROSERVICE} \
            --broker-base-url=${PACTFLOW_HOST} \
            --version=${TAG} \
            -k ${PACTFLOW_TOKEN} \
            --to-environment=${ENVIRONMENT}
        if: inputs.pact
      - uses: actions/checkout@v3
        with:
          repository: SBLogX/kubernetes

          token: ${{ secrets.gh_access_token }}
          ref: master
      - name: check if the value exists
        run: |
          yq 'keys' $GITHUB_WORKSPACE/helm/upply-stack/values.${{inputs.environment}}.yaml | grep -E '^\- '${{ inputs.microservice }}'$'

      - name: Update values file in kubernetes repo
        run: |
          yq -i '(.${{ inputs.microservice }}.image.tag)|="'${{ inputs.tag }}'"' $GITHUB_WORKSPACE/helm/upply-stack/values.${{inputs.environment}}.yaml
          cd $GITHUB_WORKSPACE
          git config --global user.name "${{ secrets.tech_user_account }}"
          git config --global user.email "${{ secrets.tech_user_account_email }}"
          git add $GITHUB_WORKSPACE/helm/upply-stack/values.${{inputs.environment}}.yaml
          git diff-index --quiet HEAD || git commit -m "release upply-${{ inputs.environment }}-${{ inputs.microservice }}-${{ inputs.tag }}"
          git pull --rebase=true origin master
          git push origin master

      - name: Notify pact
        if: inputs.pact
        run: |
          docker run pactfoundation/pact-cli broker record_deployment \
            --pacticipant=${MICROSERVICE} \
            --broker-base-url=${PACTFLOW_HOST} \
            --version=${TAG} \
            -k ${PACTFLOW_TOKEN} \
            --environment=${ENVIRONMENT}

      - name: Notify teams for dev
        uses: skitionek/notify-microsoft-teams@master
        if: inputs.environment == 'dev'
        with: 
          webhook_url: ${{ secrets.dev_cluster_webhook }}
          overwrite: "{title: `${{ inputs.microservice }}:${{ inputs.tag }} deploying.`}"
          job: ${{ toJson(job) }}

      - name: Notify teams for quality
        uses: skitionek/notify-microsoft-teams@master
        if: inputs.environment == 'quality'
        with: 
          webhook_url: ${{ secrets.quality_cluster_webhook }}
          overwrite: "{title: `${{ inputs.microservice }}:${{ inputs.tag }} deploying.`}"
          job: ${{ toJson(job) }}

      - name: Notify teams for preprod
        uses: skitionek/notify-microsoft-teams@master
        if: inputs.environment == 'preprod'
        with: 
          webhook_url: ${{ secrets.preprod_cluster_webhook }}
          overwrite: "{title: `${{ inputs.microservice }}:${{ inputs.tag }} deploying.`}"
          job: ${{ toJson(job) }}

      - name: Notify teams for preprod
        uses: skitionek/notify-microsoft-teams@master
        if: inputs.environment == 'prod'
        with: 
          webhook_url: ${{ secrets.prod_cluster_webhook }}
          overwrite: "{title: `${{ inputs.microservice }}:${{ inputs.tag }} deploying.`}"
          job: ${{ toJson(job) }}

